import { fsExtra, lodash, Mustache } from '@umijs/utils';
import assert from 'assert';
import { existsSync, readFileSync, statSync, writeFileSync } from 'fs';
import { dirname, join } from 'path';
import { Paths } from './path';
function isTypeScriptFile(path: string) {
  return !/\.d\.ts$/.test(path) && /\.(ts|tsx)$/.test(path);
}
export interface WriteTmpFileOptions {
  path: string;
  content?: string;
  tpl?: string;
  tplPath?: string;
  context?: Record<string, string>;
  noPluginDir?: boolean;
  paths: Paths;
  name: string;
}
export const writeTmpFile = (opts: WriteTmpFileOptions) => {
  const { absTmpPath } = opts.paths;
  const absPath = join(
    absTmpPath,
    !opts.noPluginDir ? `plugin-${opts.name}` : '',
    opts.path,
  );
  fsExtra.mkdirpSync(dirname(absPath));
  let content = opts.content;
  if (!content) {
    assert(
      !opts.tplPath ||
        (existsSync(opts.tplPath) && statSync(opts.tplPath).isFile()),
      `opts.tplPath does not exists or is not a file.`,
    );
    const tpl = opts.tplPath ? readFileSync(opts.tplPath, 'utf-8') : opts.tpl;
    assert(tpl, `opts.tpl or opts.tplPath must be supplied.`);
    assert(
      lodash.isPlainObject(opts.context),
      `opts.context must be plain object.`,
    );
    content = Mustache.render(tpl, opts.context);
  }

  // Only js files generate comments
  const isJsFile = /\.(t|j)sx?$/.test(absPath);

  content = [
    isTypeScriptFile(opts.path) && `// @ts-nocheck`,
    isJsFile && '// This file is generated by Umi automatically',
    isJsFile && '// DO NOT CHANGE IT MANUALLY!',
    content.trim(),
    '',
  ]
    .filter((text) => text !== false)
    .join('\n');

  if (!existsSync(absPath)) {
    writeFileSync(absPath, content, 'utf-8');
  } else {
    const fileContent = readFileSync(absPath, 'utf-8');

    if (fileContent.startsWith('// debug') || fileContent === content) {
      return;
    } else {
      writeFileSync(absPath, content, 'utf-8');
    }
  }
};
