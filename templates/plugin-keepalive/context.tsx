// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import React, { useEffect } from 'react';
import { matchPath, useLocation, useOutlet } from 'react-router-dom';
import clientRoutes from '../routes';

export interface KeepAliveContextProps {
  keepalive: RegExp[];
  setKeepalive: React.Dispatch<React.SetStateAction<RegExp[]>>;
  keepElements: React.MutableRefObject<any>;
  dropByCacheKey: (path: string) => void;
  cacheKeyMap: Record<string, number>;
}

export const KeepAliveContext = React.createContext<KeepAliveContextProps>({});
type Subscription<T> = (val: T) => void;
class EventEmitter<T> {
  private subscriptions = new Set<Subscription<T>>();

  emit = (val: T) => {
    for (const subscription of this.subscriptions) {
      subscription(val);
    }
  };

  useSubscription = (callback: Subscription<T>) => {
    function subscription(val: T) {
      if (callback) {
        callback(val);
      }
    }
    this.subscriptions.add(subscription);
  };
}
export const keepaliveEmitter = new EventEmitter();

// 兼容非全路径的 path
const getFullPath = (currPath = '', parentPath = '') => {
  if (currPath.startsWith('/')) {
    return currPath;
  }
  return `${parentPath.replace(/\/$/, '')}/${currPath}`;
};
const findRouteByPath = (path, routes) => {
  let route = {};
  const find = (routess, parentPath) => {
    for (let i = 0; i < routess.length; i++) {
      const item = routess[i];
      const fullPath = getFullPath(item.path, parentPath);
      // path:'*' 404 page
      if (
        matchPath(fullPath?.toLowerCase(), path?.toLowerCase()) &&
        !item.isLayout &&
        item.path !== '*'
      ) {
        route = item;
        break;
      }
      if (item.children) {
        find(item.children, fullPath);
      }
    }
  };
  find(routes);
  return route;
};
const isKeepPath = (aliveList: any[], path: string, route: any) => {
  let isKeep = false;
  aliveList.map((item) => {
    if (item === path) {
      isKeep = true;
    }
    if (item instanceof RegExp && item.test(path)) {
      isKeep = true;
    }
    if (
      typeof item === 'string' &&
      item?.toLowerCase() === path?.toLowerCase()
    ) {
      isKeep = true;
    }
  });
  if (isKeep === false) {
    isKeep = !!route.isKeepalive;
  }
  if (route?.redirect) {
    console.log('redirect');
    isKeep = false;
  }
  return isKeep;
};

// this error
let pathname = '';
export function useKeepOutlets() {
  const location = useLocation();
  pathname = location.pathname?.toLowerCase();
  const element = useOutlet();
  const intl = {
    formatMessage: ({ defaultMessage }) => defaultMessage,
  };

  const route = findRouteByPath(location.pathname?.toLowerCase(), clientRoutes);
  const routeConfig = { ...route, ...(clientRoutes[route?.id] || {}) };

  const { cacheKeyMap, keepElements, keepalive, dropByCacheKey } =
    React.useContext(KeepAliveContext);

  useEffect(() => {
    keepaliveEmitter?.useSubscription?.((event) => {
      const { type = '', payload = {} } = event;
      switch (type) {
        case 'dropByCacheKey':
          dropByCacheKey(payload?.path?.toLowerCase());
          break;
        default:
          break;
      }
    });
  }, []);
  const isKeep = isKeepPath(
    keepalive,
    location.pathname?.toLowerCase(),
    routeConfig,
  );
  if (isKeep && !keepElements.current[location.pathname?.toLowerCase()]) {
    const currentIndex = Object.keys(keepElements.current).length;
    keepElements.current[location.pathname?.toLowerCase()] = {
      children: element,
      index: currentIndex,
    };
  }
  return (
    <>
      {Object.entries(keepElements.current).map(
        ([pathname, { children }]: any) => (
          <div
            key={`${pathname?.toLowerCase()}:${
              cacheKeyMap[pathname?.toLowerCase()] || '_'
            }`}
            className="runtime-keep-alive-layout"
            style={{
              height: '100%',
              width: '100%',
              position: 'relative',
              overflow: 'hidden auto',
            }}
            hidden={
              !matchPath(
                location.pathname?.toLowerCase(),
                pathname?.toLowerCase(),
              )
            }
          >
            {children}
          </div>
        ),
      )}
      <div
        hidden={isKeep}
        style={{
          height: '100%',
          width: '100%',
          position: 'relative',
          overflow: 'hidden auto',
        }}
        className="runtime-keep-alive-layout-no"
      >
        {!isKeep && element}
      </div>
    </>
  );
}
